
services:
  redis:
    image: redis:7-alpine
    container_name: redis-rate-limit
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    networks:
      - rate-limiter-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3

  memcached:
    image: memcached:alpine
    container_name: memcached-rate-limiter
    ports:
      - "11211:11211"
    networks:
      - rate-limiter-network
    healthcheck:
      test: ["CMD", "sh", "-c", "echo stats | nc localhost 11211"]
      interval: 10s
      timeout: 5s
      retries: 3

  mysql:
    image: mysql:8
    container_name: mysql-rate-limiter
    environment:
      - MYSQL_ROOT_PASSWORD=root
      - MYSQL_DATABASE=go_rate_limiter_db
    ports:
      - "3306:3306"
    networks:
      - rate-limiter-network
    healthcheck:
      test: [ "CMD", "mysqladmin", "ping", "-h", "localhost", "-proot" ]
      interval: 10s
      timeout: 5s
      retries: 5

  postgres:
    image: postgres:16-alpine
    container_name: postgres-rate-limiter
    environment:
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=go_rate_limiter_db
    ports:
      - "5432:5432"
    networks:
      - rate-limiter-network
    healthcheck:
      test: [ "CMD", "pg_isready", "-U", "postgres" ]
      interval: 10s
      timeout: 5s
      retries: 5

  app:
    build: .
    container_name: go-rate-limiter-challenge-app
    ports:
      - "8080:8080"
    environment:
      - SERVER_PORT=8080
      - RL_IP_LIMIT=5
      - RL_TOKEN_LIMIT_DEFAULT=3
      - RL_CUSTOM_TOKEN_LIMITS=abc123:20,xyz999:100,premium:200
      - RL_BLOCK_DURATION_SECONDS=300
      - REDIS_URL=redis://redis:6379/0
      - MEMCACHED_SERVER=memcached:11211
      - MYSQL_DSN=root:root@tcp(mysql:3306)/go_rate_limiter_db
      - POSTGRES_DSN=postgres://postgres:postgres@postgres:5432/go_rate_limiter_db?sslmode=disable
      - STORAGE_BACKEND=redis
      - GIN_MODE=release
    depends_on:
      redis:
        condition: service_healthy
      memcached:
        condition: service_healthy
      mysql:
        condition: service_healthy
      postgres:
        condition: service_healthy
    networks:
      - rate-limiter-network
    restart: unless-stopped

volumes:
  redis_data:

networks:
  rate-limiter-network:
    driver: bridge
